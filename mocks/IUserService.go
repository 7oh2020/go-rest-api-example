// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	dto "go-rest-api-example/app/common/dto"

	mock "github.com/stretchr/testify/mock"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *IUserService) Create(user *dto.UserModel) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UserModel) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *IUserService) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *IUserService) FindByID(id uint) (*dto.UserModel, error) {
	ret := _m.Called(id)

	var r0 *dto.UserModel
	if rf, ok := ret.Get(0).(func(uint) *dto.UserModel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *IUserService) Update(user *dto.UserModel) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.UserModel) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
